export interface Metadata {
    id: string;
    bucket_id: string;
    bucket_name: string;
    input_id: string;
    input_name: string;
    output_name: string;
    output_destination: string;
}
export interface Headers {
    headers: any;
}
export interface Event {
    type: string;
    status: string;
    message: string;
    meta: Metadata;
    headers: Headers;
    query: string;
    body: string;
    method: string;
}
export default class SubscriptionMessage {
    private type;
    private status;
    private message;
    private meta;
    private headers;
    private query;
    private body;
    private method;
    private created;
    /** @private */
    constructor(type: string, status: string, message: string, meta: Metadata, headers: Headers, query: string, body: string, method: string);
    /**
     * Name of the bucket that received the webhook
     */
    getBucketName(): string;
    getType(): string;
    getStatus(): string;
    getMessage(): string;
    static fromJSON(json: any): SubscriptionMessage;
}
export declare class ResponseMessage {
    private meta;
    private status;
    private headers;
    private body;
    /** @private */
    constructor(meta: Metadata, status: Number, headers: Headers, body: string);
    getMeta(): Metadata;
    getStatus(): Number;
    getHeaders(): Headers;
    getBody(): string;
    static fromJSON(json: any): ResponseMessage;
}
export { SubscriptionMessage };
