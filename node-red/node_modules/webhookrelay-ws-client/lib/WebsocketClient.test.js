"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var WebsocketClient_1 = __importDefault(require("./WebsocketClient"));
var axios_1 = __importDefault(require("axios"));
var chai = __importStar(require("chai"));
var expect = chai.expect;
describe('Connect to WHR', function () {
    var key = process.env.RELAY_KEY;
    var secret = process.env.RELAY_SECRET;
    var testBucket = process.env.RELAY_BUCKET;
    var responsiveTestBucket = process.env.RELAY_RESPONSIVE_BUCKET;
    it('should be able to subscribe correctly', function (done) {
        var handler = function (data) {
            console.log(data);
            var msg = JSON.parse(data);
            if (msg.type === 'status' && msg.status == 'subscribed') {
                expect(msg.message).to.have.string(testBucket);
                done();
                client.disconnect();
            }
        };
        var client = new WebsocketClient_1.default(key, secret, [testBucket], handler);
        client.connect();
    });
    it('should be able to forward the webhook', function (done) {
        var payload = "payload-" + Math.floor((Math.random() * 100000) + 1);
        // creating a handler
        var handler = function (data) {
            var msg = JSON.parse(data);
            if (msg.type === 'status' && msg.status == 'subscribed') {
                var dispatchWebhook = function () {
                    axios_1.default.post('https://my.webhookrelay.com/v1/webhooks/9c1f0997-1a34-4357-8a88-87f604daeca9', payload)
                        .then(function (response) {
                        expect(response.status).to.equal(200);
                    });
                };
                setTimeout(dispatchWebhook, 1000);
            }
            if (msg.type === 'webhook' && msg.body === payload) {
                expect(msg.method).to.equal('POST');
                done();
                client.disconnect();
            }
        };
        var client = new WebsocketClient_1.default(key, secret, [testBucket], handler);
        client.connect();
    });
    it('should send custom response to the webhook', function (done) {
        // responder is a client that can send responses
        var responder = new WebsocketClient_1.default(key, secret);
        var payload = "payload-" + Math.floor((Math.random() * 100000) + 1);
        // creating a handler
        var handler = function (data) {
            var msg = JSON.parse(data);
            if (msg.type === 'status' && msg.status == 'subscribed') {
            }
            if (msg.type === 'webhook' && msg.body === payload) {
                console.log('RESPONDING');
                responder.respond({
                    meta: msg.meta,
                    status: 201,
                    body: 'banana',
                    headers: {
                        xkey: ['xvalue']
                    }
                });
                expect(msg.method).to.equal('POST');
                // disconnecting client
                responsiveClient.disconnect();
            }
        };
        var responsiveClient = new WebsocketClient_1.default(key, secret, [responsiveTestBucket], handler);
        responsiveClient.connect();
        console.log('sending webhook');
        axios_1.default.post('https://my.webhookrelay.com/v1/webhooks/6b337226-a24b-4a78-9323-c5a402cd08cb', payload)
            .then(function (response) {
            expect(response.status).to.equal(201);
            expect(response.data).to.equal('banana');
            done();
        });
    });
});
